import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `main.dart` with the code generated by Freezed
// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
part 'task.g.dart';

@JsonSerializable()
class Task implements Comparable<Task> {
  const Task({
    required this.id,
    required this.title,
    required this.description,
    required this.date,
    required this.address,
    required this.status,
    required this.category,
    required this.isNotify,
  });

  /// The generated code assumes these values exist in JSON.
  final int id;
  final String title;
  final String description;
  final int date;
  final String address;
  final String status;
  final String category;
  final int isNotify;

  /// Connect the generated [_$PersonFromJson] function to the `fromJson`
  /// factory.

  factory Task.fromJson(Map<String, Object?> json) => _$TaskFromJson(json);

  /// Connect the generated [_$PersonToJson] function to the `toJson` method.
  Map<String, dynamic> toMap() => _$TaskToJson(this);

  Task copyWith({
    int? id,
    String? title,
    String? description,
    int? date,
    String? address,
    String? status,
    String? category,
    int? isNotify,
  }) {
    return Task(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      date: date ?? this.date,
      address: address ?? this.address,
      status: status ?? this.status,
      category: category ?? this.category,
      isNotify: isNotify ?? this.isNotify,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Task &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          other.title == title &&
          other.description == description &&
          other.date == date &&
          other.address == address &&
          other.status == status &&
          other.category == category &&
          other.isNotify == isNotify;

  @override
  int get hashCode {
    return id.hashCode ^ title.hashCode ^ description.hashCode ^ date.hashCode ^ address.hashCode ^ status.hashCode ^ category.hashCode ^ isNotify.hashCode;
  }

  @override
  int compareTo(Task other) => date.compareTo(other.date);
}
